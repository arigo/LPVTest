#pragma kernel ClearKernel
#pragma kernel BorderKernel
#pragma kernel ClearBorderKernel
#pragma kernel InjectKernel
#pragma kernel PropagateStepKernel
#pragma kernel DebugKernel

#include "SHCommon.cginc"

/**********************************************************************************/


RWTexture3D<float4> LPV_r, LPV_g, LPV_b;
RWTexture3D<float4> LPV_r_accum, LPV_g_accum, LPV_b_accum;
Texture3D<float4> LPV_r_prev, LPV_g_prev, LPV_b_prev;
RWStructuredBuffer<int> LPV_gv;

Texture2D<float4> ShadowTexture;
Texture2D<float4> ShadowTextureColor;
uint GridResolution, PropagationStep;
float4x4 WorldToLightLocalMatrix;

RWStructuredBuffer<float4> ExtractTexture;
Texture3D<float4> ExtractSource;

float4 LPV_sh_r, LPV_sh_g, LPV_sh_b;


[numthreads(4, 4, 4)]
void ClearKernel(uint3 id : SV_DispatchThreadID)
{
    LPV_r[id] = float4(0, 0, 0, 0);
    LPV_g[id] = float4(0, 0, 0, 0);
    LPV_b[id] = float4(0, 0, 0, 0);
    LPV_r_accum[id] = float4(0, 0, 0, 0);
    LPV_g_accum[id] = float4(0, 0, 0, 0);
    LPV_b_accum[id] = float4(0, 0, 0, 0);
}

void InitializeColorFromBorder(uint3 id)
{
    LPV_r[id] = LPV_sh_r;
    LPV_g[id] = LPV_sh_g;
    LPV_b[id] = LPV_sh_b;
    //LPV_r_accum[id] = LPV_sh_r;
    //LPV_g_accum[id] = LPV_sh_g;
    //LPV_b_accum[id] = LPV_sh_b;
}

void ClearColorFromBorder(uint3 id)
{
    LPV_r_accum[id] = float4(0, 0, 0, 0);
    LPV_g_accum[id] = float4(0, 0, 0, 0);
    LPV_b_accum[id] = float4(0, 0, 0, 0);
}

void DampColorFromBorder(uint3 id)
{
    LPV_r_accum[id] *= 0.65;
    LPV_g_accum[id] *= 0.65;
    LPV_b_accum[id] *= 0.65;
}

[numthreads(8, 8, 1)]
void BorderKernel(uint3 id : SV_DispatchThreadID)
{
    InitializeColorFromBorder(uint3(id.x, id.y, 0));
    InitializeColorFromBorder(uint3(id.x, id.y, GridResolution - 1));
    InitializeColorFromBorder(uint3(id.x, 0, id.y));
    InitializeColorFromBorder(uint3(id.x, GridResolution - 1, id.y));
    InitializeColorFromBorder(uint3(0, id.x, id.y));
    InitializeColorFromBorder(uint3(GridResolution - 1, id.x, id.y));
}

[numthreads(8, 8, 1)]
void ClearBorderKernel(uint3 id : SV_DispatchThreadID)
{
    ClearColorFromBorder(uint3(id.x, id.y, 0));
    ClearColorFromBorder(uint3(id.x, id.y, GridResolution - 1));
    ClearColorFromBorder(uint3(id.x, 0, id.y));
    ClearColorFromBorder(uint3(id.x, GridResolution - 1, id.y));
    ClearColorFromBorder(uint3(0, id.x, id.y));
    ClearColorFromBorder(uint3(GridResolution - 1, id.x, id.y));

    AllMemoryBarrierWithGroupSync();
    DampColorFromBorder(uint3(id.x, id.y, 1));
    DampColorFromBorder(uint3(id.x, id.y, GridResolution - 2));
    AllMemoryBarrierWithGroupSync();
    DampColorFromBorder(uint3(id.x, 1, id.y));
    DampColorFromBorder(uint3(id.x, GridResolution - 2, id.y));
    AllMemoryBarrierWithGroupSync();
    DampColorFromBorder(uint3(1, id.x, id.y));
    DampColorFromBorder(uint3(GridResolution - 2, id.x, id.y));
}

[numthreads(8, 8, 1)]
void InjectKernel(uint3 id : SV_DispatchThreadID)
{
    uint2 xy = id.xy;
    float4 normal_depth = ShadowTexture[xy];
    float depth = normal_depth.a;   /* between -0.5 (near) and 0.5 (far from light source) */
    if (abs(depth) > 0.5)
        return;   /* ignore, no sample here */

    float3 color = (float3)ShadowTextureColor[xy];

    float3 normal = normal_depth.xyz;
    normal = normalize(mul((float3x3)WorldToLightLocalMatrix, normal));
    float light = -normal.z;
    if (light <= 0)
        return;   /* ignore, reversed normal */
    color *= light;

    depth += 0.5;
    uint idepth = (uint)(depth * GridResolution);

    float4 shNormal = dirToCosineLobe(normal);

    LPV_r[uint3(xy, idepth)] += shNormal * color.r;
    LPV_g[uint3(xy, idepth)] += shNormal * color.g;
    LPV_b[uint3(xy, idepth)] += shNormal * color.b;
    //LPV_r_accum[uint3(xy, idepth)] = shNormal * color.r;
    //LPV_g_accum[uint3(xy, idepth)] = shNormal * color.g;
    //LPV_b_accum[uint3(xy, idepth)] = shNormal * color.b;
}

/*****************************************************************************/


float4 GetGVMask(uint3 id)
{
    uint src_index = (id.z * GridResolution + id.y) * GridResolution + id.x;
    int4 sh_int;
    src_index *= 4; sh_int.x = LPV_gv[src_index];
    src_index += 1; sh_int.y = LPV_gv[src_index];
    src_index += 1; sh_int.z = LPV_gv[src_index];
    src_index += 1; sh_int.w = LPV_gv[src_index];
    return float4(sh_int) * SH_I2F;
}

float GetGVFactor(float4 sh_gvmask, float4 sh_eval_direction)
{
    return 1.0 - clamp(sh_gvmask.x * sh_eval_direction.x + abs(dot(sh_gvmask.yzw, sh_eval_direction.yzw)), 0.0, 1.0);
}


struct ShRGB
{
    float4 sh_r, sh_g, sh_b;
};


#define SIDE_smallComponent   0.4472135 // 1 / sqrt(5)
#define SIDE_bigComponent     0.894427  // 2 / sqrt(5)

void GatherSideFaceContribution(inout ShRGB cell, inout ShRGB cell_gv, float4 sh_gvmask,
                                ShRGB neighbor, float3 delta, float3 face_direction)
{
    const float sideFaceSubtendedSolidAngle = 0.12732;
    float4 sh_faceDirectionCosineLobe = dirToCosineLobe(face_direction);
    float3 eval_direction = SIDE_bigComponent * delta + SIDE_smallComponent * face_direction;
    float4 sh_eval_direction = dirToSH(eval_direction);

    float4 sh_r = sideFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_r, sh_eval_direction)) * sh_faceDirectionCosineLobe;
    float4 sh_g = sideFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_g, sh_eval_direction)) * sh_faceDirectionCosineLobe;
    float4 sh_b = sideFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_b, sh_eval_direction)) * sh_faceDirectionCosineLobe;

    cell.sh_r += sh_r;
    cell.sh_g += sh_g;
    cell.sh_b += sh_b;

    float factor = GetGVFactor(sh_gvmask, sh_eval_direction);
    cell_gv.sh_r += sh_r * factor;
    cell_gv.sh_g += sh_g * factor;
    cell_gv.sh_b += sh_b * factor;
}

void GatherNeighborContribution(inout ShRGB cell, inout ShRGB cell_gv, float4 sh_gvmask, uint3 id, int3 idelta)
{
    ShRGB neighbor;
    neighbor.sh_r = LPV_r_prev[id - idelta];
    neighbor.sh_g = LPV_g_prev[id - idelta];
    neighbor.sh_b = LPV_b_prev[id - idelta];
    float3 delta = idelta;
    
    GatherSideFaceContribution(cell, cell_gv, sh_gvmask, neighbor, delta, delta.yzx);
    GatherSideFaceContribution(cell, cell_gv, sh_gvmask, neighbor, delta, -delta.yzx);
    GatherSideFaceContribution(cell, cell_gv, sh_gvmask, neighbor, delta, delta.zxy);
    GatherSideFaceContribution(cell, cell_gv, sh_gvmask, neighbor, delta, -delta.zxy);

    const float directFaceSubtendedSolidAngle = 0.13477;
    float4 sh_curCosLobe = dirToCosineLobe(delta);
    float4 sh_delta = dirToSH(delta);

    float4 sh_r = directFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_r, sh_delta)) * sh_curCosLobe;
    float4 sh_g = directFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_g, sh_delta)) * sh_curCosLobe;
    float4 sh_b = directFaceSubtendedSolidAngle * max(0, dot(neighbor.sh_b, sh_delta)) * sh_curCosLobe;

    cell.sh_r += sh_r;
    cell.sh_g += sh_g;
    cell.sh_b += sh_b;

    float factor = GetGVFactor(sh_gvmask, sh_delta);
    cell_gv.sh_r += sh_r * factor;
    cell_gv.sh_g += sh_g * factor;
    cell_gv.sh_b += sh_b * factor;
}

[numthreads(4, 4, 4)]
void PropagateStepKernel(uint3 id : SV_DispatchThreadID)
{
    ShRGB cell, cell_gv;
    cell.sh_r = cell.sh_g = cell.sh_b = float4(0, 0, 0, 0);
    cell_gv.sh_r = cell_gv.sh_g = cell_gv.sh_b = float4(0, 0, 0, 0);

    float4 sh_gvmask = PropagationStep < 1 ? float4(0, 0, 0, 0) : GetGVMask(id);
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(1, 0, 0));
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(0, 1, 0));
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(0, 0, 1));
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(-1, 0, 0));
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(0, -1, 0));
    GatherNeighborContribution(cell, cell_gv, sh_gvmask, id, int3(0, 0, -1));
    LPV_r[id] = cell_gv.sh_r;
    LPV_g[id] = cell_gv.sh_g;
    LPV_b[id] = cell_gv.sh_b;
    LPV_r_accum[id] += cell.sh_r;
    LPV_g_accum[id] += cell.sh_g;
    LPV_b_accum[id] += cell.sh_b;
}

[numthreads(4, 4, 4)]
void DebugKernel(uint3 id : SV_DispatchThreadID)
{
    uint3 pos = id.xyz;
    uint index = (id.z * GridResolution + id.y) * GridResolution + id.x;
    ExtractTexture[index] = ExtractSource[pos];
}
